{"version":3,"sources":["config.ts","components/Webcam.tsx","components/Timer.tsx","faceAPI.ts","views/WebcamPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Webcam","props","useState","webcamStream","setWebcamStream","videoInputs","setVideoInputs","activeDeviceId","setActiveDeviceId","mirrored","setMirrored","currentFrame","setCurrentFrame","currentFaceArea","setCurrentFaceArea","resultSpoofing","setResultSpoofing","resultFaceScore","setResultFaceScore","successCount","setSuccessCount","dropTimeout","setDropTimeout","mediaRecorder","setMediaRecorder","recordedBlobs","setRecordedBlobs","setBlobsUploading","blobsUploaded","setBlobsUploaded","setBlobsUploadError","mirroredRef","useRef","selectRef","videoRef","canvasRef","hiddenCanvasRef","canvasContainerRef","useTranslation","t","updateWebcamStream","i18n","a","getTracks","forEach","track","stop","navigator","mediaDevices","getUserMedia","video","deviceId","exact","undefined","audio","getVideoInputs","enumerateDevices","allDevives","filter","x","kind","resetDropTimeout","clearTimeout","console","log","window","setTimeout","expiredCallback","useEffect","current","srcObject","play","MediaRecorder","mimeType","passed","blob","Blob","type","url","config","assignmentId","fetch","method","body","headers","then","resp","callback","catch","err","downloadVideo","addEventListener","e","prev","data","start","uploadCallback","canvas","context","getContext","scaleRatio","offsetWidth","videoWidth","encodeFrame","hiddenCanvas","hcontext","h","videoHeight","width","height","drawImage","toDataURL","checked","scale","renderFrame","ratio2","strokeStyle","color","lineWidth","rect","left","top","right","bottom","stroke","drawFaceArea","submit","submitImage","imageURL","id","faceID","cameraSelected","find","cameraList","result","face_score","isSuccessful","success","bbox","spoofing","timeout","autoPlay","className","ref","muted","playsInline","success_count","onChange","target","value","map","label","children","onClick","Timer","seconds","timeLeft","setTimeLeft","Math","floor","toString","padStart","params","imageEncoded","split","JSON","stringify","image","camera_name","camera_list","res","json","WebcamPage","location","useLocation","seed","URLSearchParams","search","get","language","expired","setExpired","expiredT","setExpiredT","setPassed","uploaded","setUploaded","changeLanguage","btoa","atob","key","clipboard","writeText","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","i18next","init","interpolation","escapeValue","lng","resources","en","common","common_en","ru","common_ru","ReactDOM","render","StrictMode","I18nextProvider","document","getElementById"],"mappings":"8jFAAe,EACJ,uD,OCsBEA,EAAS,SAACC,GACnB,MAAwCC,mBAA6B,MAArE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,mBAAwC,MAA9E,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA4CJ,mBAAwB,MAApE,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAgCN,oBAAkB,GAAlD,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAwCR,mBAAiB,GAAzD,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAA8CV,mBAA0B,MAAxE,mBAAOW,EAAP,KAAwBC,EAAxB,KACA,EAA4CZ,mBAAwB,MAApE,mBAAOa,EAAP,KAAuBC,EAAvB,KACA,EAA8Cd,mBAAwB,MAAtE,mBAAOe,EAAP,KAAwBC,EAAxB,KACA,EAAwChB,mBAAiB,GAAzD,mBAAOiB,EAAP,KAAqBC,EAArB,KACA,EAAsClB,mBAAwB,MAA9D,mBAAOmB,EAAP,KAAoBC,EAApB,KACA,EAA0CpB,mBAA+B,MAAzE,mBAAOqB,EAAP,KAAsBC,EAAtB,KACA,GAA0CtB,mBAAiB,IAA3D,qBAAOuB,GAAP,MAAsBC,GAAtB,MACA,GAA4CxB,oBAAS,GAArD,qBAAuByB,IAAvB,aACA,GAA0CzB,oBAAS,GAAnD,qBAAO0B,GAAP,MAAsBC,GAAtB,MACA,GAAgD3B,mBAAS,IAAzD,qBAAyB4B,IAAzB,aACMC,GAAcC,iBAAyB,MACvCC,GAAYD,iBAA0B,MACtCE,GAAWF,iBAAyB,MACpCG,GAAYH,iBAA0B,MACtCI,GAAkBJ,iBAA0B,MAC5CK,GAAqBL,iBAAuB,MAClD,GAAkBM,YAAe,UAA1BC,GAAP,GAAOA,EAEDC,IAFN,GAAUC,KAEc,uCAAG,sBAAAC,EAAA,6DACnBvC,GACAA,EAAawC,YAAYC,SAAQ,SAAAC,GAAK,OAAIA,EAAMC,UAF7B,KAIvB1C,EAJuB,SAKb2C,UACDC,aACAC,aAAa,CACVC,MAAO,CAAEC,SAAU,CAAEC,MAAK,OAAE7C,QAAF,IAAEA,SAAkB8C,IAC9CC,OAAO,IATI,6EAAH,sDAclBC,GAAc,uCAAG,4BAAAb,EAAA,yDACdrC,EADc,gCAGL0C,UACDC,aACAQ,mBALM,OAETC,EAFS,OAOfnD,EAAemD,EAAWC,QAAO,SAAAC,GAAC,MAAe,eAAXA,EAAEC,SAPzB,2CAAH,qDAWdC,GAAmB,WACjBxC,GACAyC,aAAazC,GAEjB0C,QAAQC,IAAI,wBAEZ1C,EAAe2C,OAAOC,YAAW,WACzBjE,EAAMkE,iBACNlE,EAAMkE,oBACX,MAEHJ,QAAQC,IAAI,qBAsJhB,OA3HAI,qBAAU,WACNb,KACAM,OACD,IAEHO,qBAAU,WACN5B,OACD,CAACjC,IAEJ6D,qBAAU,WAAO,IAAD,EACZlC,GAASmC,QAASC,UAAYnE,EAC9B,UAAA+B,GAASmC,eAAT,SAAkBE,OACdpE,GACAqB,EAAiB,IAAIgD,cAAcrE,EAAc,CAAEsE,SAAU,kBAElE,CAACtE,IAEJiE,qBAAU,YACFjD,GAAgB,GAAKlB,EAAMyE,SA1Cb,WAClB,IAAMC,EAAO,IAAIC,KAAKnD,GAAe,CAAEoD,KAAM,eAE7ClD,IAAkB,GAClB,IAAMmD,EAAG,UAAMC,EAAN,YAAsB9E,EAAM+E,aAA5B,SACTjB,QAAQC,IAAIc,GACZG,MAAMH,EAAK,CACPI,OAAQ,MACRC,KAAMR,EACNS,QAAS,CACL,eAAgB,gBAGnBC,MAAK,SAAAC,GACFzD,IAAiB,GACjBkC,QAAQC,IAAI,YACZ/D,EAAMsF,UAAYtF,EAAMsF,cAE3BC,OAAM,SAAAC,GACH3D,GAAoB2D,GACpB1B,QAAQC,IAAI,mBAuBhB0B,KACL,CAACvE,EAAclB,EAAMyE,SAExBN,qBAAU,WACO,OAAb7C,QAAa,IAAbA,KAAeoE,iBAAiB,iBAAiB,SAACC,GAC9ClE,IAAiB,SAAAmE,GAAI,4BAASA,GAAT,CAAeD,EAAEE,UACtC/B,QAAQC,IAAI4B,EAAEE,SAGL,OAAbvE,QAAa,IAAbA,KAAewE,MAAM,OACtB,CAACxE,IAEJ6C,qBAAU,WACFxC,IAAiB3B,EAAM+F,gBACvB/F,EAAM+F,mBACX,CAACpE,KAEJwC,qBAAU,WACN,IAAMlB,EAAQhB,GAASmC,QACjB4B,EAAS9D,GAAUkC,QACnB6B,EAAUD,EAAOE,WAAW,MAE5BC,EADY/D,GAAmBgC,QACRgC,YAAcnD,EAAMoD,WA2B3CC,EAAc,WAEhB,IAAMC,EAAepE,GAAgBiC,QAC/BoC,EAAWD,EAAaL,WAAW,MAIrCO,EADI,KADIxD,EAAMyD,YAAczD,EAAMoD,YAYtC,OATAE,EAAaI,MAFL,IAGRJ,EAAaK,OAASH,EAEtBD,EAASK,UAAU5D,EAAO,EAAG,EALrB,IAK2BwD,GAKvBF,EAAaO,UAAU,aAAc,KAzCjC,WAAO,IAAD,IACtBd,EAAOW,MAAQ1D,EAAMoD,WAAaF,EAClCH,EAAOY,OAAS3D,EAAMyD,YAAcP,GAEpC,UAAIrE,GAAYsC,eAAhB,aAAI,EAAqB2C,UACrBd,EAAQe,OAAO,EAAG,GAEtBf,EAAQY,UAAU5D,GAAO,UAAAnB,GAAYsC,eAAZ,eAAqB2C,UAAW,EAAIf,EAAOW,MAAQ,EAAG,EAAGX,EAAOW,MAAOX,EAAOY,QAsC3GK,GAnCqB,WACjB,GAAIrG,EAAiB,CAAC,IAAD,EACXsG,EAASlB,EAAOW,MAAQ,IAC9BV,EAAQkB,YAAcvG,EAAgBwG,MACtCnB,EAAQoB,UAAY,EACpBpB,EAAQqB,KACJ1G,EAAgB2G,KAAOL,IAAU,UAAApF,GAAYsC,eAAZ,eAAqB2C,SAAUf,EAAOW,MAAQ,GAC/E/F,EAAgB4G,IAAMN,GACrBtG,EAAgB6G,MAAQ7G,EAAgB2G,MAAQL,GAChDtG,EAAgB8G,OAAS9G,EAAgB4G,KAAON,GAErDjB,EAAQ0B,UAyBhBC,GACA,IAAMC,EAAM,uCAAG,8BAAApF,EAAA,sEACUzC,EAAM8H,YAAa,CACpCC,SAAUzB,IACV0B,GAAIhI,EAAMiI,OACVlD,aAAc/E,EAAM+E,aACpBmD,eAAc,OAAE9H,QAAF,IAAEA,OAAF,EAAEA,EAAa+H,MAAK,SAAAzE,GAAC,OAAIA,EAAER,UAAY5C,KACrD8H,WAAYhI,IANL,OACLiI,EADK,OAQPrI,EAAMkE,iBAAmBmE,EAAOxF,OAAwB,IAAhBwF,EAAOxF,MAC/C7C,EAAMkE,kBACNmE,EAAOC,WAAa,IACpB1E,KACE2E,EAAeF,EAAOG,QAC5B3H,EAAmB,2BACZwH,EAAOI,MADI,IAEdrB,MAAOmB,EAAe,QAAU,UAEpCtH,EAAmBoH,EAAOC,YAC1BvH,EAAkBsH,EAAOK,UACrBH,GACApH,GAAgB,SAAAyE,GAAI,OAAIA,EAAO,KApBxB,4CAAH,qDAuBR5F,EAAM8H,aAAepH,EAAe,KAAO,GAC3CmH,IAEJ,IAAMc,EAAU1E,YACZ,kBAAMtD,GAAgB,SAACiF,GAAD,OAAUA,EAAO,OACzC,KACF,OAAO,kBAAM/B,aAAa8E,MAE3B,CAACjI,IAGA,gCACI,uBAAOkI,UAAU,EAAMC,UAAU,SAASC,IAAK7G,GAAU8G,OAAK,EAACC,aAAW,IAC1E,sBAAKH,UAAU,mBAAf,UACI,qBAAKC,IAAK1G,GAAoByG,UAAU,2BAAxC,SACI,wBAAQC,IAAK5G,OAEjB,qBAAK2G,UAAU,gDAAf,SACI,+BACI,+BACI,4BAAIvG,GAAE,oCACLA,GAAE,gCAAiC,CAAC2G,cAAe/H,OAExD,8BACMF,GAAmBA,EAAkB,GACvC,kCAAKsB,GAAE,8CAAP,OACA,kCAAKA,GAAE,0CAAP,SAEJ,+BACI,0CADJ,IACsBxB,KAEtB,6BACI,kCACI,4BAAIwB,GAAE,mCACN,uBACA,wBAAQwG,IAAK9G,GAAWkH,SAAU,SAACvD,GAAD,OAAOpF,EAAkBoF,EAAEwD,OAAOC,QAApE,gBACMhJ,QADN,IACMA,OADN,EACMA,EAAaiJ,KAAI,SAAA3F,GAAC,OAAI,yBAAQ0F,MAAO1F,EAAER,SAAjB,cAA6BQ,EAAE4F,OAAF,iBAAqB5F,EAAER,UAApD,iBAIpC,6BACI,wBAAO2F,UAAU,oBAAjB,UACI,mBAAGA,UAAU,gBAAb,SAA8BvG,GAAE,oCAChC,uBAAOuG,UAAU,WAAWjE,KAAK,WAAWkE,IAAKhH,GAAaiF,QAASvG,EAAU0I,SAC7E,SAACvD,GACGlF,EAAYkF,EAAEwD,OAAOpC,iBAKrC,6BACK/G,EAAMuJ,WAEX,6BACI,wBAAQvB,GAAG,gBAAgBa,UAAU,SAASW,QAAS,kBAAMrI,GAAgB,SAAAyE,GAAI,OAAIA,EAAO,MAA5F,wCAMhB,wBAAQkD,IAAK3G,GAAiB0G,UAAU,eCpRvCY,EAAQ,SAACzJ,GAAuB,IAAD,EACxC,EAAgCC,mBAAQ,UAACD,EAAM0J,eAAP,QAAkB,KAA1D,mBAAOC,EAAP,KAAiBC,EAAjB,KAgBA,OAdAzF,qBAAU,WACN,KAAIwF,GAAY,GAAhB,CAMA,IAAMhB,EAAU1E,YACZ,kBAAM2F,GAAY,SAAChE,GAAD,OAAUA,EAAO,OACrC,KAEF,OAAO,kBAAM/B,aAAa8E,IATlB3I,EAAMsF,UACNtF,EAAMsF,aASf,CAACqE,IAGA,gCACI,qCAAQE,KAAKC,MAAMH,EAAW,IAAII,WAAWC,SAAS,EAAG,KAAzD,OADJ,IAGI,qCAAQH,KAAKC,MAAMH,EAAW,IAAII,WAAWC,SAAS,EAAG,KAAzD,WClBClC,EAAW,uCAAG,WAAOmC,GAAP,qBAAAxH,EAAA,6DACjByH,EAAeD,EAAOlC,SAASoC,MAAM,KAAK,GADzB,kBAEhBnF,MAZK,8DAYU,CAClBC,OAAQ,OACRE,QAAS,CACL,eAAgB,oBAEpBD,KAAMkF,KAAKC,UAAUD,KAAKC,UAAU,CAChCC,MAAOJ,EACPlC,GAAIiC,EAAOjC,GACXjD,aAAckF,EAAOlF,aACrBwF,YAAa,CACTrH,SAAQ,UAAE+G,EAAO/B,sBAAT,aAAE,EAAuBhF,SACjCoG,MAAK,UAAEW,EAAO/B,sBAAT,aAAE,EAAuBoB,OAElCkB,YAAW,UAAEP,EAAO7B,kBAAT,aAAE,EAAmBiB,KAAI,SAAA3F,GAChC,MAAO,CACHR,SAAUQ,EAAER,SACZoG,MAAO5F,EAAE4F,eAKpBlE,MAAK,SAAAqF,GAAG,OAAIA,EAAIC,UAChBnF,OAAM,SAACC,GAEJ,OAAO,SA1BQ,2CAAH,sDCJjB,SAASmF,IACZ,IAAMC,EAAWC,cACXC,EAAO,IAAIC,gBAAgBH,EAASI,QAAQC,IAAI,OAChDC,EAAW,IAAIH,gBAAgBH,EAASI,QAAQC,IAAI,YACpDhD,EAAS,IAAI8C,gBAAgBH,EAASI,QAAQC,IAAI,UACxD,EAAgChL,oBAAS,GAAzC,mBAAQkL,EAAR,KAAiBC,EAAjB,KACA,EAAkCnL,oBAAS,GAA3C,mBAAQoL,EAAR,KAAkBC,EAAlB,KACA,EAA8BrL,oBAAS,GAAvC,mBAAQwE,EAAR,KAAgB8G,EAAhB,KACA,EAAkCtL,oBAAS,GAA3C,mBAAQuL,EAAR,KAAkBC,EAAlB,KACA,EAAoBpJ,YAAe,UAA3BC,EAAR,EAAQA,EAAGE,EAAX,EAAWA,KAMX,GAJA2B,qBAAU,WACN3B,EAAKkJ,eAAL,OAAoBR,QAApB,IAAoBA,IAAY,QACjC,KAEEjD,IAAW6C,EACZ,OAAO,wBAEX,GAAIK,EACA,OAAO,8BAAM7I,EAAE,+BAEnB,IAAKmC,GAAU4G,IAAaG,EAAU,CAClC,IAAMf,EAAMkB,KAAKC,KAAKd,GAALc,cACjB,OAAO,gCACFtJ,EAAE,2BAA4B,CAACuJ,IAAKpB,IACrC,wBAAQ5B,UAAU,+BAA+BW,QAAO,sBAAE,sBAAA/G,EAAA,sEAChDK,UAAUgJ,UAAUC,UAAUtB,GADkB,2CAA1D,SAGKnI,EAAE,wCAKf,OACI,8BACI,cAAC,EAAD,CACIyC,aAAc6G,KAAKd,GACnBxF,SAAU,kBAAMiG,GAAU,IAC1BrH,gBAAiB,kBAAMkH,GAAW,IAClCnD,OAAQA,EACRH,YAAaA,EACb/B,eAAgB,kBAAM0F,GAAY,IAClChH,OAAQ4G,EAPZ,SASI,gCACI,4BAAI/I,EAAE,6BACN,uBACA,cAAC,EAAD,CAAOoH,QAAS,IAAKpE,SAAU,kBAAMgG,GAAY,aCvCtDU,MAVf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAZ,cAAiB,cAACtB,EAAD,IAAjB,YCMOuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhH,MAAK,YAAkD,IAA/CiH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gCCCdO,IAAQC,KAAK,CACXC,cAAe,CAAEC,aAAa,GAC9BC,IAAK,KACLC,UAAW,CACTC,GAAI,CACFC,OAAQC,GAEVC,GAAI,CACFF,OAAQG,MAKdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAiBhL,KAAMkK,IAAvB,SACE,cAAC,EAAD,QAGJe,SAASC,eAAe,SAM1BxB,M","file":"static/js/main.15bdc5cd.chunk.js","sourcesContent":["export default {\n    s3url: 'https://storage.yandexcloud.net/toloka-open/video_v2'\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport config from '../config';\n\ninterface WebcamProps {\n    children: JSX.Element,\n    faceID: string,\n    assignmentId: string,\n    submitImage?: (params: any) => any,\n    callback?: () => void,\n    expiredCallback?: () => void,\n    uploadCallback?: () => void,\n    passed?: boolean,\n};\n\ninterface FaceArea {\n    color: string,\n    left: number,\n    top: number,\n    right: number,\n    bottom: number\n};\n\nexport const Webcam = (props: WebcamProps) => {\n    const [webcamStream, setWebcamStream] = useState<MediaStream | null>(null);\n    const [videoInputs, setVideoInputs] = useState<Array<MediaDeviceInfo> | null>(null);\n    const [activeDeviceId, setActiveDeviceId] = useState<string | null>(null);\n    const [mirrored, setMirrored] = useState<boolean>(true);\n    const [currentFrame, setCurrentFrame] = useState<number>(0);\n    const [currentFaceArea, setCurrentFaceArea] = useState<FaceArea | null>(null);\n    const [resultSpoofing, setResultSpoofing] = useState<number | null>(null);\n    const [resultFaceScore, setResultFaceScore] = useState<number | null>(null);\n    const [successCount, setSuccessCount] = useState<number>(0);\n    const [dropTimeout, setDropTimeout] = useState<number | null>(null);\n    const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n    const [recordedBlobs, setRecordedBlobs] = useState<Blob[]>([]);\n    const [blobsUploading, setBlobsUploading] = useState(false);\n    const [blobsUploaded, setBlobsUploaded] = useState(false);\n    const [blobsUploadError, setBlobsUploadError] = useState(\"\");\n    const mirroredRef = useRef<HTMLInputElement>(null);\n    const selectRef = useRef<HTMLSelectElement>(null);\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const hiddenCanvasRef = useRef<HTMLCanvasElement>(null);\n    const canvasContainerRef = useRef<HTMLDivElement>(null);\n    const {t, i18n} = useTranslation('common');\n\n    const updateWebcamStream = async () => {\n        if (webcamStream) // stop the current stream\n            webcamStream.getTracks().forEach(track => track.stop());\n        \n        setWebcamStream(\n            await navigator\n                .mediaDevices\n                .getUserMedia({\n                    video: { deviceId: { exact: activeDeviceId ?? undefined } },\n                    audio: false\n                })\n        );\n    };\n\n    const getVideoInputs = async () => {\n        if (!videoInputs) {\n            const allDevives = \n                await navigator\n                    .mediaDevices\n                    .enumerateDevices();\n            \n            setVideoInputs(allDevives.filter(x => x.kind === 'videoinput'));\n        }\n    };\n\n    const resetDropTimeout = () => {\n        if (dropTimeout)\n            clearTimeout(dropTimeout);\n\n        console.log('drop timeout cleared');\n\n        setDropTimeout(window.setTimeout(() => {\n            if (props.expiredCallback)\n                props.expiredCallback();\n        }, 60000));\n\n        console.log('drop timeout set');\n    }\n\n    const downloadVideo = () => {\n        const blob = new Blob(recordedBlobs, { type: 'video/webm' });\n\n        setBlobsUploading(true);\n        const url = `${config.s3url}/${props.assignmentId}.webm`;\n        console.log(url);\n        fetch(url, {\n            method: 'PUT',\n            body: blob,\n            headers: {\n                'Content-Type': 'video/webm'\n            }\n        })\n            .then(resp => {\n                setBlobsUploaded(true);\n                console.log('uploaded');\n                props.callback && props.callback();\n            })\n            .catch(err => {\n                setBlobsUploadError(err);\n                console.log('not uploaded');\n            });\n    };\n\n    useEffect(() => { // get the webcam stream\n        getVideoInputs();\n        resetDropTimeout();\n    }, []);\n\n    useEffect(() => {\n        updateWebcamStream();\n    }, [activeDeviceId]);\n\n    useEffect(() => { // play the webcam stream in the hidden video tag\n        videoRef.current!.srcObject = webcamStream;\n        videoRef.current?.play();\n        if (webcamStream) {\n            setMediaRecorder(new MediaRecorder(webcamStream, { mimeType: 'video/webm' }));\n        }\n    }, [webcamStream]);\n\n    useEffect(() => {\n        if (successCount >= 5 || props.passed)\n            downloadVideo();\n    }, [successCount, props.passed]);\n\n    useEffect(() => {\n        mediaRecorder?.addEventListener('dataavailable', (e) => {\n            setRecordedBlobs(prev => [ ...prev, e.data ]);\n            console.log(e.data);\n        });\n\n        mediaRecorder?.start(1000);\n    }, [mediaRecorder]);\n\n    useEffect(() => {\n        if (blobsUploaded && props.uploadCallback)\n            props.uploadCallback()\n    }, [blobsUploaded]);\n\n    useEffect(() => {\n        const video = videoRef.current!;\n        const canvas = canvasRef.current!;\n        const context = canvas.getContext('2d')!;\n        const container = canvasContainerRef.current!;\n        const scaleRatio = container.offsetWidth / video.videoWidth;\n        \n        const renderFrame = () => { // render the current webcam stream frame in the canvas \n            canvas.width = video.videoWidth * scaleRatio;\n            canvas.height = video.videoHeight * scaleRatio;\n\n            if (mirroredRef.current?.checked)\n                context.scale(-1, 1);\n\n            context.drawImage(video, mirroredRef.current?.checked ? -1 * canvas.width : 0, 0, canvas.width, canvas.height);\n        };\n\n        const drawFaceArea = () => {\n            if (currentFaceArea) {\n                const ratio2 = canvas.width / 600;\n                context.strokeStyle = currentFaceArea.color;\n                context.lineWidth = 2;\n                context.rect(\n                    currentFaceArea.left * ratio2 - (mirroredRef.current?.checked ? canvas.width : 0), \n                    currentFaceArea.top * ratio2, \n                    (currentFaceArea.right - currentFaceArea.left) * ratio2, \n                    (currentFaceArea.bottom - currentFaceArea.top) * ratio2\n                );\n                context.stroke();\n            }\n        };\n\n        const encodeFrame = () => {\n            // resize and convert the frame to jpeg, then send it \n            const hiddenCanvas = hiddenCanvasRef.current!;\n            const hcontext = hiddenCanvas.getContext('2d')!;\n            const \n                ratio = video.videoHeight / video.videoWidth,\n                w = 600,\n                h = ratio * w;\n            hiddenCanvas.width = w;\n            hiddenCanvas.height = h;\n\n            hcontext.drawImage(video, 0, 0, w, h);\n            // if (mirroredRef.current?.checked)\n            //     hcontext.scale(-1, 1);\n            // hcontext.drawImage(video, mirroredRef.current?.checked ? -1 * hiddenCanvas.width : 0, 0, w, h);\n\n            const res = hiddenCanvas.toDataURL('image/jpeg', 1.0);\n            return res;\n        };\n\n        renderFrame();\n        drawFaceArea();\n        const submit = async () => {\n            const result = await props.submitImage!({\n                imageURL: encodeFrame(), \n                id: props.faceID, \n                assignmentId: props.assignmentId,\n                cameraSelected: videoInputs?.find(x => x.deviceId == activeDeviceId),\n                cameraList: videoInputs\n            });\n            if (props.expiredCallback && result.stop && result.stop === true)\n                props.expiredCallback();\n            if (result.face_score < 0.7) \n                resetDropTimeout();\n            const isSuccessful = result.success;\n            setCurrentFaceArea({\n                ...result.bbox,\n                color: isSuccessful ? 'green' : 'blue'\n            });\n            setResultFaceScore(result.face_score);\n            setResultSpoofing(result.spoofing);\n            if (isSuccessful)\n                setSuccessCount(prev => prev + 1);\n        };\n\n        if (props.submitImage && currentFrame % 15 === 0)\n            submit();\n        \n        const timeout = setTimeout(\n            () => setCurrentFrame((prev) => prev + 1)\n        , 100); // re-render in 100ms\n        return () => clearTimeout(timeout);\n\n    }, [currentFrame]);\n\n    return (\n        <div>\n            <video autoPlay={true} className=\"hidden\" ref={videoRef} muted playsInline />\n            <div className=\"grid grid-cols-2\">\n                <div ref={canvasContainerRef} className=\"col-span-2 lg:col-span-1\">\n                    <canvas ref={canvasRef} />\n                </div>\n                <div className=\"col-span-2 lg:col-span-1 w-50 p-6 bg-gray-100\">\n                    <ul>\n                        <li>\n                            <b>{t('webcam.bar.success_count.title')}</b> \n                            {t('webcam.bar.success_count.text', {success_count: successCount})}\n                        </li>\n                        <li>\n                            {!resultFaceScore || resultFaceScore > 0.7 ? \n                            <b> {t('webcam.bar.face_score.not_target_face_text')} </b> : \n                            <b> {t('webcam.bar.face_score.target_face_text')} </b>}\n                        </li>\n                        <li>\n                            <b>spoofing:</b> {resultSpoofing}\n                        </li>\n                        <li>\n                            <label>\n                                <b>{t('webcam.bar.input_select.title')}</b>\n                                <br />\n                                <select ref={selectRef} onChange={(e) => setActiveDeviceId(e.target.value)}>\n                                    { videoInputs?.map(x => <option value={x.deviceId}> {x.label || `Camera ${x.deviceId}`} </option>)} \n                                </select>\n                            </label>\n                        </li>\n                        <li>\n                            <label className=\"flex items-center\">\n                                <b className=\"pr-2 flex-col\">{t('webcam.bar.mirror_toggle.title')}</b>\n                                <input className=\"flex-col\" type='checkbox' ref={mirroredRef} checked={mirrored} onChange={\n                                    (e) => {\n                                        setMirrored(e.target.checked);\n                                    }\n                                } />\n                            </label> \n                        </li>\n                        <li>\n                            {props.children}\n                        </li>\n                        <li>\n                            <button id=\"successButton\" className=\"hidden\" onClick={() => setSuccessCount(prev => prev + 1)}> Success button </button>\n                        </li> \n                    </ul>\n                </div>\n            </div>\n            \n            <canvas ref={hiddenCanvasRef} className=\"hidden\" />\n        </div>\n    );\n}","import { useState, useEffect } from 'react' \n\ninterface TimerProps {\n    callback?: () => void,\n    seconds?: number\n}\n\nexport const Timer = (props: TimerProps) => {\n    const [timeLeft, setTimeLeft] = useState(props.seconds ?? 120);\n\n    useEffect(() => {\n        if (timeLeft <= 0) {\n            if (props.callback)\n                props.callback();\n            return;\n        }\n\n        const timeout = setTimeout(\n            () => setTimeLeft((prev) => prev - 1)\n        , 1000);\n        \n        return () => clearTimeout(timeout); \n    }, [timeLeft]);\n\n    return (\n        <div>\n            <span> {Math.floor(timeLeft / 60).toString().padStart(2, \"0\")} </span>\n            :\n            <span> {Math.floor(timeLeft % 60).toString().padStart(2, \"0\")} </span>\n        </div>\n    );\n}","const API_URL = 'https://toloka.suricatvision.com:8443/predictions/biometric'\n\ninterface SubmitImageParameters {\n    imageURL: string,\n    id: string,\n    assignmentId: string,\n    cameraSelected: MediaDeviceInfo,\n    cameraList: MediaDeviceInfo[]\n}\n\nexport const submitImage = async (params: SubmitImageParameters) => {\n    const imageEncoded = params.imageURL.split(',')[1];\n    return fetch(API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(JSON.stringify({\n            image: imageEncoded,\n            id: params.id,\n            assignmentId: params.assignmentId,\n            camera_name: {\n                deviceId: params.cameraSelected?.deviceId,\n                label: params.cameraSelected?.label\n            },\n            camera_list: params.cameraList?.map(x => {\n                return {\n                    deviceId: x.deviceId, \n                    label: x.label\n                }\n            })\n        }))\n    })\n        .then(res => res.json())\n        .catch((err) => {\n            // console.log(err);\n            return null;\n        });\n}\n","import React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Webcam, Timer } from '../components';\nimport { submitImage } from '../faceAPI';\nimport { useTranslation } from 'react-i18next';\n\nexport function WebcamPage() {\n    const location = useLocation();\n    const seed = new URLSearchParams(location.search).get('key');\n    const language = new URLSearchParams(location.search).get('language');\n    const faceID = new URLSearchParams(location.search).get('faceid');\n    const [ expired, setExpired ] = useState(false);\n    const [ expiredT, setExpiredT ] = useState(false);\n    const [ passed, setPassed ] = useState(false);\n    const [ uploaded, setUploaded ] = useState(false);\n    const { t, i18n } = useTranslation('common');\n\n    useEffect(() => {\n        i18n.changeLanguage(language ?? 'en');\n    }, []);\n\n    if (!faceID || !seed)\n        return <div></div>;\n\n    if (expired)\n        return <div>{t('webcam.view.timer.expired')}</div>;\n\n    if ((passed || expiredT) && uploaded) {\n        const res = btoa(atob(seed) + '|>*<|' + 'aaaaa');\n        return <div>\n            {t('webcam.view.success.text', {key: res})} \n            <button className=\"pl-2 underline text-gray-600\" onClick={async () => {\n                await navigator.clipboard.writeText(res);\n            }}> \n                {t('webcam.view.success.copy_button')} \n            </button>\n        </div>;\n    }\n\n    return (\n        <div> \n            <Webcam \n                assignmentId={atob(seed)} \n                callback={() => setPassed(true)} \n                expiredCallback={() => setExpired(true)} \n                faceID={faceID} \n                submitImage={submitImage}\n                uploadCallback={() => setUploaded(true)}\n                passed={expiredT}\n            >\n                <div>\n                    <b>{t('webcam.view.timer.title')}</b> \n                    <br />\n                    <Timer seconds={300} callback={() => setExpiredT(true)} />\n                </div>\n            </Webcam>\n        </div>\n    );\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { WebcamPage } from './views';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/'> <WebcamPage /> </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport i18next from 'i18next';\nimport { I18nextProvider } from 'react-i18next';\nimport common_en from './translations/en/common.json';\nimport common_ru from './translations/ru/common.json';\n\ni18next.init({\n  interpolation: { escapeValue: false }, \n  lng: 'en',\n  resources: {\n    en: {\n      common: common_en\n    },\n    ru: {\n      common: common_ru\n    }\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <I18nextProvider i18n={i18next}>\n      <App />\n    </I18nextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}